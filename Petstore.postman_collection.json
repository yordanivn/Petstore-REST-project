{
	"info": {
		"_postman_id": "09f17faf-7e9e-4b89-9251-f67274428515",
		"name": "Petstore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28802747"
	},
	"item": [
		{
			"name": "Pet",
			"item": [
				{
					"name": "Add new pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"",
									"const petId = pm.collectionVariables.get('id');",
									"const petStatus = pm.collectionVariables.get('status');",
									"",
									"pm.collectionVariables.set(\"lastCreatedPetId\",responseData.id)",
									"pm.collectionVariables.set(\"lastCreatedPetStatus\",responseData.status)",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"category\");",
									"    pm.expect(responseJson).to.have.property(\"name\");",
									"    pm.expect(responseJson).to.have.property(\"photoUrls\");",
									"    pm.expect(responseJson).to.have.property(\"tags\");",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"});",
									"",
									"// Matches the request ID",
									"pm.test(\"Message matches the request ID\", function () {",
									"    const responseJson = pm.response.json();",
									"    const requestId = pm.environment.get(\"petId\");",
									"    pm.expect(responseJson.id).to.eql(requestId);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random unique ID for the pet",
									"pm.environment.set(\"petId\", Math.floor(Math.random() * 1000000));",
									"",
									"// Randomly select a category from Mammal, Bird, Fish",
									"const categories = [\"Mammal\", \"Bird\", \"Fish\"];",
									"const categoryName = categories[Math.floor(Math.random() * categories.length)];",
									"pm.environment.set(\"categoryName\", categoryName);",
									"",
									"// Set a constant categoryId based on the category",
									"const categoryId = categories.indexOf(categoryName) + 1; // 1 for Mammal, 2 for Bird, 3 for Fish",
									"pm.environment.set(\"categoryId\", categoryId);",
									"",
									"// Define animal names based on the category",
									"const animalNames = {",
									"    Mammal: [\"Dog\", \"Cat\", \"Rabbit\", \"Hamster\", \"Guinea Pig\"],",
									"    Bird: [\"Parrot\", \"Finch\", \"Canary\", \"Budgie\", \"Pigeon\"],",
									"    Fish: [\"Goldfish\", \"Betta Fish\", \"Tetra\", \"Guppy\", \"Molly\"]",
									"};",
									"",
									"// Randomly pick an animal name based on the category",
									"const nameList = animalNames[categoryName];",
									"const animalName = nameList[Math.floor(Math.random() * nameList.length)];",
									"pm.environment.set(\"petName\", animalName);",
									"",
									"// Set an empty photoUrl",
									"pm.environment.set(\"photoUrl\", \"\");",
									"",
									"// Generate a random tagsId",
									"const tagsId = Math.floor(Math.random() * 100);",
									"pm.environment.set(\"tagsId\", tagsId);",
									"",
									"// Define tag names",
									"const tagNames = [\"Playful\", \"Cuddly\", \"Energetic\", \"Independent\", \"Gentle\"];",
									"",
									"// Randomly pick a tag name",
									"const tagName = tagNames[Math.floor(Math.random() * tagNames.length)];",
									"pm.environment.set(\"tagName\", tagName);",
									"",
									"const status = [\"available\", \"pending\", \"sold\"];",
									"const statusName = status[Math.floor(Math.random() * status.length)];",
									"pm.environment.set(\"statusName\", statusName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{petId}},\n  \"category\": {\n    \"id\": {{categoryId}},\n    \"name\": \"{{categoryName}}\"\n  },\n  \"name\": \"{{petName}}\",\n  \"photoUrls\": [\n    \"{{photoUrl}}\"\n  ],\n  \"tags\": [\n    {\n      \"id\": {{tagsId}},\n      \"name\": \"{{tagName}}\"\n    }\n  ],\n  \"status\": \"{{statusName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get pet by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"category\");",
									"    pm.expect(responseJson).to.have.property(\"name\");",
									"    pm.expect(responseJson).to.have.property(\"photoUrls\");",
									"    pm.expect(responseJson).to.have.property(\"tags\");",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pet/{{lastCreatedPetId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"{{lastCreatedPetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pet/findByStatus?status=sold,pending,available",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "sold,pending,available"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"",
									"const petId = pm.collectionVariables.get('id');",
									"const petStatus = pm.collectionVariables.get('status');",
									"",
									"pm.collectionVariables.set(\"lastCreatedPetId\",responseData.id)",
									"pm.collectionVariables.set(\"lastCreatedPetStatus\",responseData.status)",
									"",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"category\");",
									"    pm.expect(responseJson).to.have.property(\"name\");",
									"    pm.expect(responseJson).to.have.property(\"photoUrls\");",
									"    pm.expect(responseJson).to.have.property(\"tags\");",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random unique ID for the pet",
									"//pm.environment.set(\"petId\", Math.floor(Math.random() * 1000000));",
									"",
									"// Randomly select a category from Mammal, Bird, Fish",
									"const categories = [\"Mammal\", \"Bird\", \"Fish\"];",
									"const categoryName = categories[Math.floor(Math.random() * categories.length)];",
									"pm.environment.set(\"categoryName\", categoryName);",
									"",
									"// Set a constant categoryId based on the category",
									"const categoryId = categories.indexOf(categoryName) + 1; // 1 for Mammal, 2 for Bird, 3 for Fish",
									"pm.environment.set(\"categoryId\", categoryId);",
									"",
									"// Define animal names based on the category",
									"const animalNames = {",
									"    Mammal: [\"Dog\", \"Cat\", \"Rabbit\", \"Hamster\", \"Guinea Pig\"],",
									"    Bird: [\"Parrot\", \"Finch\", \"Canary\", \"Budgie\", \"Pigeon\"],",
									"    Fish: [\"Goldfish\", \"Betta Fish\", \"Tetra\", \"Guppy\", \"Molly\"]",
									"};",
									"",
									"// Randomly pick an animal name based on the category",
									"const nameList = animalNames[categoryName];",
									"const animalName = nameList[Math.floor(Math.random() * nameList.length)];",
									"pm.environment.set(\"petName\", animalName);",
									"",
									"// Set an empty photoUrl",
									"pm.environment.set(\"photoUrl\", \"\");",
									"",
									"// Generate a random tagsId",
									"const tagsId = Math.floor(Math.random() * 100);",
									"pm.environment.set(\"tagsId\", tagsId);",
									"",
									"// Define tag names",
									"const tagNames = [\"Playful\", \"Cuddly\", \"Energetic\", \"Independent\", \"Gentle\"];",
									"",
									"// Randomly pick a tag name",
									"const tagName = tagNames[Math.floor(Math.random() * tagNames.length)];",
									"pm.environment.set(\"tagName\", tagName);",
									"",
									"const status = [\"available\", \"pending\", \"sold\"];",
									"const statusName = status[Math.floor(Math.random() * status.length)];",
									"pm.environment.set(\"statusName\", statusName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{lastCreatedPetId}},\n  \"category\": {\n    \"id\": {{categoryId}},\n    \"name\": \"{{categoryName}}\"\n  },\n  \"name\": \"{{petName}}+Edited\",\n  \"photoUrls\": [\n    \"{{photoUrl}}\"\n  ],\n  \"tags\": [\n    {\n      \"id\": {{tagsId}},\n      \"name\": \"{{tagName}}\"\n    }\n  ],\n  \"status\": \"{{statusName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload image to existing pet by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"// Verify the type is \"unknown\"",
									"pm.test(\"Response type is 'unknown'\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.type).to.eql(\"unknown\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef8b1c5-0380-4b10-9a8a-2afbe6ebf3e5"
								},
								{
									"key": "additionalMetadata",
									"value": "dog1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/pet/{{lastCreatedPetId}}/uploadImage",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"{{lastCreatedPetId}}",
								"uploadImage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updates a pet in the store with form data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"// Verify the type is \"unknown\"",
									"pm.test(\"Response type is 'unknown'\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.type).to.eql(\"unknown\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "edited",
									"type": "text"
								},
								{
									"key": "status",
									"value": "pending",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/pet/{{lastCreatedPetId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"{{lastCreatedPetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify the response code is 200",
									"pm.test(\"Response code is 200\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql(200);",
									"});",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"const lastCreatedPetId = pm.collectionVariables.get(\"lastCreatedPetId\");",
									"",
									"// Check if the last created user is deleted",
									"pm.test(\"The last created pet is deleted\", function () {",
									"    pm.expect(responseJson.message).to.include(lastCreatedPetId); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/pet/{{lastCreatedPetId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"pet",
								"{{lastCreatedPetId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Store",
			"item": [
				{
					"name": "Return pet inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"sold\");",
									"    pm.expect(responseJson).to.have.property(\"{{PetStatus-Updated}}\");",
									"    pm.expect(responseJson).to.have.property(\"2\");",
									"    pm.expect(responseJson).to.have.property(\"string\");",
									"    pm.expect(responseJson).to.have.property(\"pending\");",
									"    pm.expect(responseJson).to.have.property(\"available\");",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/store/inventory",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"store",
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place an order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"pm.collectionVariables.set(\"lastCreatedOrderId\",responseData.id)",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"petId\");",
									"    pm.expect(responseJson).to.have.property(\"quantity\");",
									"    pm.expect(responseJson).to.have.property(\"shipDate\");",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"    pm.expect(responseJson).to.have.property(\"complete\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random unique ID for the order",
									"pm.environment.set(\"orderId\", Math.floor(Math.random() * 1000000));",
									"",
									"// Generate a random quantity number",
									"const quantity = Math.floor(Math.random() * 5) + 1;",
									"pm.environment.set(\"quantity\", quantity);",
									"",
									"// Get the current date",
									"const currentDate = new Date();",
									"",
									"// Format the date as \"YYYY-MM-DD\"",
									"const year = currentDate.getFullYear();",
									"const month = (currentDate.getMonth() + 1).toString().padStart(2, '0'); ",
									"const day = currentDate.getDate().toString().padStart(2, '0'); ",
									"const currentDateString = `${year}-${month}-${day}`;",
									"",
									"// Set the current date in the environment",
									"pm.environment.set(\"currentDate\", currentDateString);",
									"",
									"// Generate a random boolean (true or false)",
									"const randomBoolean = Math.random() < 0.5;",
									"",
									"// Set the random boolean in the environment",
									"pm.environment.set(\"isOrderComplete\", randomBoolean);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": {{orderId}},\n    \"petId\": {{lastCreatedPetId}},\n    \"quantity\": {{quantity}},\n    \"shipDate\": \"2024-10-21T17:43:10.012+0000\",\n    \"status\": \"placed\",\n    \"complete\": {{isOrderComplete}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/store/order",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"petId\");",
									"    pm.expect(responseJson).to.have.property(\"quantity\");",
									"    pm.expect(responseJson).to.have.property(\"shipDate\");",
									"    pm.expect(responseJson).to.have.property(\"status\");",
									"    pm.expect(responseJson).to.have.property(\"complete\");",
									"});",
									"",
									"pm.test(\"Response fields have correct data types\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.id).to.be.a('number');",
									"    pm.expect(responseJson.petId).to.be.a('number');",
									"    pm.expect(responseJson.quantity).to.be.a('number');",
									"    pm.expect(responseJson.shipDate).to.be.a('string');",
									"    pm.expect(responseJson.status).to.be.a('string');",
									"    pm.expect(responseJson.complete).to.be.a('boolean');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/store/order/{{lastCreatedOrderId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"store",
								"order",
								"{{lastCreatedOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete purchase order by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify the response code is 200",
									"pm.test(\"Response code is 200\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql(200);",
									"});",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"const lastCreatedOrderId = pm.collectionVariables.get(\"lastCreatedOrderId\");",
									"",
									"// Check if the last created user is deleted",
									"pm.test(\"The last created order is deleted\", function () {",
									"    pm.expect(responseJson.message).to.include(lastCreatedOrderId); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/store/order/{{lastCreatedOrderId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"store",
								"order",
								"{{lastCreatedOrderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to verify the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"// Verify the response code is 200",
									"pm.test(\"Response code is 200\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql(200);",
									"});",
									"",
									"// Check that the message matches the request ID",
									"pm.test(\"Message matches the request ID\", function () {",
									"    const responseJson = pm.response.json();",
									"    const requestId = pm.environment.get(\"randomId\").toString();",
									"    pm.expect(responseJson.message).to.eql(requestId);",
									"});",
									"",
									"// Verify the type is \"unknown\"",
									"pm.test(\"Response type is 'unknown'\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.type).to.eql(\"unknown\");",
									"});",
									"",
									"// Store the user ID from the response",
									"const responseData = pm.response.json();",
									"pm.collectionVariables.set(\"lastCreatedUserId\", responseData.message);",
									"",
									"// Generate the username based on the last created user ID",
									"const lastCreatedUserId = responseData.message; // Get the last created user ID",
									"const lastCreatedUsername = `user_${lastCreatedUserId}`; // Construct the username",
									"pm.collectionVariables.set(\"lastCreatedUsername\", lastCreatedUsername); // Store it",
									"",
									"console.log(\"Username stored as lastCreatedUsername:\", lastCreatedUsername);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random unique ID",
									"pm.environment.set(\"randomId\", Math.floor(Math.random() * 1000000));",
									"",
									"// Generate random username",
									"//pm.environment.set(\"randomUsername\", `user_${Math.floor(Math.random()*10000)}`);",
									"",
									"// Generate random first name",
									"pm.environment.set(\"randomFirstName\", `firstName_${Math.random().toString(36).substring(7)}`);",
									"",
									"// Generate random last name",
									"pm.environment.set(\"randomLastName\", `lastName_${Math.random().toString(36).substring(7)}`);",
									"",
									"// Generate random email",
									"pm.environment.set(\"randomEmail\", `email_${Math.random().toString(36).substring(7)}@test.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{randomId}},\n  \"username\": \"user_{{randomId}}\",\n  \"firstName\": \"{{randomFirstName}}\",\n  \"lastName\": \"{{randomLastName}}\",\n  \"email\": \"{{randomEmail}}\",\n  \"password\": \"123456\",\n  \"phone\": \"111111\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create list of users with given input array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Verify the fields",
									"pm.test(\"Response has expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"//Verify the code is 200",
									"pm.test(\"Response code is 200\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql(200);",
									"});",
									"",
									"//Verify the type is unknown",
									"pm.test(\"Response type is 'unknown'\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.type).to.eql(\"unknown\");",
									"});",
									"",
									"//Verify the message is ok",
									"pm.test(\"Message is 'ok'\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.eql(\"ok\");",
									"});",
									"",
									"// Store the last username and user ID from the request body",
									"const usersArray = JSON.parse(pm.environment.get(\"usersArray\")); // Get the users array",
									"",
									"if (Array.isArray(usersArray) && usersArray.length > 0) {",
									"    const lastUser = usersArray[usersArray.length - 1]; // Get the last user",
									"    const lastCreatedUserId = lastUser.id; // Get the ID of the last user",
									"    const lastCreatedUsername = lastUser.username; // Get the username of the last user",
									"    ",
									"    // Store the last username and user ID as collection variables",
									"    pm.collectionVariables.set(\"lastCreatedUsername\", lastCreatedUsername); // Store the last username",
									"    pm.collectionVariables.set(\"lastCreatedUserId\", lastCreatedUserId); // Store the last created user ID",
									"    ",
									"    // Console logs to confirm storage",
									"    console.log(\"Last username stored as lastCreatedUsername:\", lastCreatedUsername);",
									"    console.log(\"Last user ID stored as lastCreatedUserId:\", lastCreatedUserId);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomNumber() {",
									"    return Math.floor(Math.random() * 1000000);",
									"}",
									"",
									"// Generate an array of random users",
									"let users = [];",
									"for (let i = 0; i < 5; i++) {",
									"    let randomNumber = getRandomNumber();",
									"    let user = {",
									"        id: randomNumber,",
									"        username: `user_${randomNumber}`, // Set the username correctly here",
									"        firstName: `firstName_${randomNumber}`,",
									"        lastName: `lastName_${randomNumber}`,",
									"        email: `email_${randomNumber}`,",
									"        password: \"123456\",",
									"        phone: \"111111\",",
									"        userStatus: 0",
									"    };",
									"    users.push(user);",
									"}",
									"",
									"// Set the array in the environment variable",
									"pm.environment.set(\"usersArray\", JSON.stringify(users));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{usersArray}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/createWithArray",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"lastCreatedUsername:\", pm.environment.get(\"lastCreatedUsername\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"const responseData = pm.response.json();",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"id\");",
									"    pm.expect(responseJson).to.have.property(\"username\");",
									"    pm.expect(responseJson).to.have.property(\"firstName\");",
									"    pm.expect(responseJson).to.have.property(\"lastName\");",
									"    pm.expect(responseJson).to.have.property(\"email\");",
									"    pm.expect(responseJson).to.have.property(\"password\");",
									"    pm.expect(responseJson).to.have.property(\"phone\");",
									"    pm.expect(responseJson).to.have.property(\"userStatus\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/user/{{lastCreatedUsername}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"{{lastCreatedUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random first name",
									"pm.environment.set(\"randomFirstName\", `firstName_${Math.random().toString(36).substring(7)}`);",
									"",
									"// Generate random last name",
									"pm.environment.set(\"randomLastName\", `lastName_${Math.random().toString(36).substring(7)}`);",
									"",
									"// Generate random email",
									"pm.environment.set(\"randomEmail\", `email_${Math.random().toString(36).substring(7)}@test.com`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to verify the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"// Verify the response code is 200",
									"pm.test(\"Response code is 200\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql(200);",
									"});",
									"",
									"// Check that the message matches the user ID",
									"pm.test(\"Message matches the user ID\", function () {",
									"    const responseJson = pm.response.json();",
									"    const lastCreatedUserId = pm.collectionVariables.get(\"lastCreatedUserId\");",
									"    pm.expect(responseJson.message).to.eql(lastCreatedUserId.toString());",
									"});",
									"",
									"// Verify the type is \"unknown\"",
									"pm.test(\"Response type is 'unknown'\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.type).to.eql(\"unknown\");",
									"});",
									"",
									"// Store the user ID from the response",
									"const responseData = pm.response.json();",
									"const updatedUserId = responseData.message; // Assuming message contains the user ID",
									"",
									"pm.collectionVariables.set(\"lastCreatedUserId\", updatedUserId);",
									"",
									"// Construct the username based on the last created user ID",
									"const lastCreatedUsername = `user_${updatedUserId}_edited`; // Append \"_edited\" for clarity",
									"pm.collectionVariables.set(\"lastCreatedUsername\", lastCreatedUsername); // Store it",
									"",
									"console.log(\"Username stored as lastCreatedUsername:\", lastCreatedUsername);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": {{lastCreatedUserId}},\n  \"username\": \"user_{{lastCreatedUserId}}_edited\", \n  \"firstName\": \"{{randomFirstName}}\",\n  \"lastName\": \"{{randomLastName}}\",\n  \"email\": \"{{randomEmail}}\",\n  \"password\": \"123456\",\n  \"phone\": \"111111\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/{{lastCreatedUsername}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"{{lastCreatedUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log in user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const responseData = pm.response.json();",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"// Verify the response code is 200",
									"pm.test(\"Response code is 200\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/user/login?username={{lastCreatedUsername}}&password=123456",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{lastCreatedUsername}}"
								},
								{
									"key": "password",
									"value": "123456"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const responseData = pm.response.json();",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"// Verify the response code is 200",
									"pm.test(\"Response code is 200\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql(200);",
									"});",
									"",
									"// Verify the type is \"unknown\"",
									"pm.test(\"Response type is 'unknown'\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.type).to.eql(\"unknown\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/user/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify the response code is 200",
									"pm.test(\"Response code is 200\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql(200);",
									"});",
									"",
									"// Validate the response structure",
									"pm.test(\"Response has all expected fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property(\"code\");",
									"    pm.expect(responseJson).to.have.property(\"type\");",
									"    pm.expect(responseJson).to.have.property(\"message\");",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"console.log(\"Response JSON:\", responseJson);",
									"const lastCreatedUsername = pm.collectionVariables.get(\"lastCreatedUsername\");",
									"",
									"// Check if the last created user is deleted",
									"pm.test(\"The last created user is deleted\", function () {",
									"    pm.expect(responseJson.message).to.include(lastCreatedUsername); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/user/{{lastCreatedUsername}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"{{lastCreatedUsername}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "api_key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "special_key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "lastCreatedPetId",
			"value": ""
		},
		{
			"key": "lastCreatedPetStatus",
			"value": ""
		},
		{
			"key": "lastCreatedUsername",
			"value": ""
		},
		{
			"key": "lastCreatedUserId",
			"value": ""
		},
		{
			"key": "lastCreatedOrderId",
			"value": ""
		}
	]
}